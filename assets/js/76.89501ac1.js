(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{489:function(t,n,s){"use strict";s.r(n);var e=s(2),a=Object(e.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[n("a",{attrs:{href:"https://nginx.org/en/docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("nginx"),n("OutboundLink")],1),t._v(" 由一个主进程和一些"),n("a",{attrs:{href:"https://nginx.org/en/docs/ngx_core_module.html#worker_processes",target:"_blank",rel:"noopener noreferrer"}},[t._v("工作进程"),n("OutboundLink")],1),t._v("构成。主进程用来读取配置信息和维护工作进程，工作进程负责实际的请求处理。nginx 采用基于事件模型和依赖操作系统机制，来有效分发请求给工作进程。")]),t._v(" "),n("h3",{attrs:{id:"开启-停用和重启"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#开启-停用和重启"}},[t._v("#")]),t._v(" 开启，停用和重启")]),t._v(" "),n("p",[t._v("nginx 开启后可执行以下命令：")]),t._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[t._v("nginx "),n("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-s")]),t._v(" signal\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("p",[t._v("sginal:")]),t._v(" "),n("ul",[n("li",[t._v("stop 立即关掉")]),t._v(" "),n("li",[t._v("quit 正常关掉，等所有工作进程处理完手中的请求才关掉")]),t._v(" "),n("li",[t._v("reload 重新加载配置文件")]),t._v(" "),n("li",[t._v("reopen 重新打开日志文件")])]),t._v(" "),n("p",[t._v("nginx 重新加载配置文件后，会根据配置文件开启新的工作进程，然后关掉旧的工作进程。"),n("br"),t._v(" "),n("a",{attrs:{href:"https://nginx.org/en/docs/control.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("更多关于nginx信号的信息"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"配置文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[t._v("#")]),t._v(" 配置文件")]),t._v(" "),n("p",[t._v("nginx 的配置文件主要有两类指令来控制。指令分为简单指令和块指令。简单的指令由名称和参数组成，参数之间用空格分隔，并以分号结束。块指令与简单指令具有相同的结构，但它以一组由大括号包围的附加指令结束，而不是分号。一个块指令构成的直接作用域被称为上下文( "),n("a",{attrs:{href:"https://nginx.org/en/docs/ngx_core_module.html#events",target:"_blank",rel:"noopener noreferrer"}},[t._v("events"),n("OutboundLink")],1),t._v(" , "),n("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_core_module.html#http",target:"_blank",rel:"noopener noreferrer"}},[t._v("http"),n("OutboundLink")],1),t._v(" , "),n("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_core_module.html#server",target:"_blank",rel:"noopener noreferrer"}},[t._v("server"),n("OutboundLink")],1),t._v(" , "),n("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_core_module.html#location",target:"_blank",rel:"noopener noreferrer"}},[t._v("location"),n("OutboundLink")],1),t._v(" )。events 和 http 指令在 "),n("a",{attrs:{href:"https://nginx.org/en/docs/ngx_core_module.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("main"),n("OutboundLink")],1),t._v(" 上下文中，server 在 http 中，location 在 server 中。")]),t._v(" "),n("h3",{attrs:{id:"代理静态资源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代理静态资源"}},[t._v("#")]),t._v(" 代理静态资源")]),t._v(" "),n("p",[t._v("web 服务器的一个重要的功能就是代理文件。接下来的一个例子是，将请求代理到不同的文件夹下。")]),t._v(" "),n("div",{staticClass:"language-nginx line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-nginx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/www")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /images")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("http://localhost/images/example.png 这个请求的实际本地路径是 /data/images/example.png"),n("br"),t._v("\nhtttp://localhost/some/example.html 这个请求实际请求的本地路径是 /data/www/some/example.html"),n("br"),t._v("\n再次加载配置文件后，如果结果不是你所期望的，你可以尝试去 logs 下的 access.log 和 error.log 文件去找原因。")]),t._v(" "),n("h3",{attrs:{id:"配置代理服务器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置代理服务器"}},[t._v("#")]),t._v(" 配置代理服务器")]),t._v(" "),n("p",[t._v("nginx 还有一个常用的功能是作为一个代理服务器来转发请求。我们将配置一个基本的代理服务器来接收图片文件的请求，然后将请求转发到被代理的服务器。在下面这个例子中，代理服务器和被代理服务器相关的配置都被定义在一个 nginx 实例上。")]),t._v(" "),n("p",[t._v("1）首先，被代理的服务器的配置如下，"),n("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_core_module.html#listen",target:"_blank",rel:"noopener noreferrer"}},[t._v("监听"),n("OutboundLink")],1),t._v("8080端口：")]),t._v(" "),n("div",{staticClass:"language-nginx line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-nginx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("listen")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/up1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("p",[t._v("这个服务器将监听8080端口，并将所有的请求映射到 /data/up1 文件目录下。在这个文件目录创建好 index.html 文件。"),n("br"),t._v("\n注意，这里只在 server 上下文环境中定义了 "),n("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_core_module.html#root",target:"_blank",rel:"noopener noreferrer"}},[t._v("root"),n("OutboundLink")],1),t._v(" , 而如果location里没有定义自己的 root，请求就会映射到 server 的 root。")]),t._v(" "),n("p",[t._v("2）接下来，配置代理服务器，主要是配置 "),n("a",{attrs:{href:"https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass",target:"_blank",rel:"noopener noreferrer"}},[t._v("proxy_pass"),n("OutboundLink")],1),t._v(" 字段，配置如下：")]),t._v(" "),n("div",{staticClass:"language-nginx line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-nginx"}},[n("code",[n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("server")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" /")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("proxy_pass")]),t._v(" http://localhost:8080/")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("location")]),t._v(" ~ \\.(gif|jpg|png)$")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token directive"}},[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("root")]),t._v(" /data/images")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br")])]),n("p",[t._v("这个服务器会接收 .gif、.jpg、.png 的请求，对应到 /data/images 目录下，并且其他的所有请求会被转发到被代理的服务器上。")])])}),[],!1,null,null,null);n.default=a.exports}}]);