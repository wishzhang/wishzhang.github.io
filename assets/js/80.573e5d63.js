(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{493:function(s,v,l){"use strict";l.r(v);var _=l(2),e=Object(_.a)({},(function(){var s=this,v=s._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[v("p",[s._v("前端兼容性是一个很普遍的问题，类似于一个软件的适应性问题。前端的兼容性问题是从哪里来的呢？不同场景有不同的兼容问题，比如 node 和web  的兼容问题，但这太广了而且不是同一类型的问题。web 前端主要还是聚焦在 web 领域的兼容性问题，即web前端项目源代码在不同环境条件下的表现一致性的问题。")]),s._v(" "),v("p",[s._v("我们要兼容的源代码有两类 css 和 js 。我们来看下环境有哪些维度：")]),s._v(" "),v("ul",[v("li",[v("p",[s._v("1 跨浏览器的兼容性问题，主要是 css 、js 代码在不同浏览器内核的有不同的支持：")]),s._v(" "),v("ul",[v("li",[s._v("对于一部分不需要兼容的浏览器，可以给个弹窗提示并引导下载安装兼容的浏览器，比如在 IE 浏览器上弹出弹窗提示，并提供谷歌或火狐的下载入口（可以尝试直接打开）")]),s._v(" "),v("li",[s._v("解决 js 的兼容性问题\n"),v("ul",[v("li",[s._v("对于缺失的 API 可以采用垫片的问题，判断没有对应的 API 就使用本身具有的基础的 API 来实现，比如 Intersection Observer API。babel 有的已经实现好的垫片可以引入进来。")]),s._v(" "),v("li",[s._v("对于已存在的 API 但只是名字不同的问题，可以通过判断当前环境的变量标志，来执行对应环境的API。")])])]),s._v(" "),v("li",[s._v("解决 css 的兼容性问题\n"),v("ul",[v("li",[s._v("css 的初始化")]),s._v(" "),v("li",[s._v("因为 css 可以冗余存在，可以将不同环境的样式合并放到同一个 css 选择器。这个工作可以通过postcss 完成。")])])])])]),s._v(" "),v("li",[v("p",[s._v("2 跨版本的兼容性问题，新版本有的 API 旧版本没有")]),s._v(" "),v("ul",[v("li",[s._v("解决 js 的兼容性问题\n"),v("ul",[v("li",[s._v("同样可以在项目配置 babel 来转换到对应的 es5、es6 等规范，或对新的 API 使用 babel 的垫片")])])]),s._v(" "),v("li",[s._v("css 的兼容性问题\n"),v("ul",[v("li",[s._v("通过测试，用最高版本和最低版本进行测试")])])])])]),s._v(" "),v("li",[v("p",[s._v("3 不同设备分辨率和大小的兼容性问题")]),s._v(" "),v("ul",[v("li",[s._v("css 布局问题，随着内容的伸缩可能布局会乱\n"),v("ul",[v("li",[s._v("考虑弹性布局，流式布局")]),s._v(" "),v("li",[s._v("考虑媒体查询等方式来解决")])])])])])]),s._v(" "),v("p",[s._v("上面可以总结为：解决 web 浏览器的兼容性问题有三个维度：跨浏览器、跨版本、跨设备，对应有不同的解决方法，部分问题可以通过借助 webpack，babel，和测试的方式来解决，然后过程如下：")]),s._v(" "),v("p",[s._v("1、实现不兼容的浏览器上的提示和引导")]),s._v(" "),v("p",[s._v("2、通过 babel 和 postcss 等转换器进行 API 的兼容")]),s._v(" "),v("p",[s._v("3、可以通过要求的最大和最小的版本的浏览器进行测试然后调整")])])}),[],!1,null,null,null);v.default=e.exports}}]);