(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{537:function(l,v,_){"use strict";_.r(v);var i=_(2),t=Object(i.a)({},(function(){var l=this,v=l._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":l.$parent.slotKey}},[v("ul",[v("li",[l._v("往往读代码是写代码所花时间的上百倍。在实际的编程中，模块层次划分比编码优雅更重要，代码注释也比编码优雅更重要，而编码优雅实际是要靠时间不断的改进才能获得的，一般情况下需要代码注释。模块层次是设计问题，影响的范围大的多。")]),l._v(" "),v("li",[l._v("前端工作应该被视为工程，工程包含公差的概念。")]),l._v(" "),v("li",[l._v("易维护的代码的一个重要的点是易理解，表现为认知负荷低，启动快，同一抽象层的数据流控制流简单，模块较为独立，接口尽量只是数据耦合。")]),l._v(" "),v("li",[l._v("读代码其实不是自上往下读（通常是在一个小的函数才这样），读代码应该是以模块的功能、结构、接口，或是以某个小的功能点为目的去读代码。因为本身这些模块也不是顺序写成的，而是组合而成的。")]),l._v(" "),v("li",[l._v("前端业务应用的开发工作主要分为两大块：UI交互、数据对接。都很重要。")]),l._v(" "),v("li",[l._v("工作量的估算大多数人是以单纯技术的角度去估算，而不是以项目管理和工程的角度。")]),l._v(" "),v("li",[l._v("软件和硬件、建筑设计等最大的区别就是：\n"),v("ul",[v("li",[l._v("大量的修改、功能、版本的迭代都是在同一个软件进行，这是软件的基本属性，也是大型软件复杂度高的根本原因，所以软件本身就是复杂。而不是耦合或依赖，那只是控制软件复杂性的一些方法。这也表示软件容易有历史约束的问题。")]),l._v(" "),v("li",[l._v("另外一点是软件模块，难以满足环境变化，导致需要修改模块。这一点和自然科学有着本质的不同，也就是模块的稳定性，这是构造系统的基石。")]),l._v(" "),v("li",[l._v("但上面的问题需要有架构设计来控制，不然软件趋于混乱。而现实通常不会有架构设计。而架构设计也可能满足不了变动的业务目标。但其实这需要有一个可预见的目标范围，这是架构设计的基础。")]),l._v(" "),v("li",[l._v("几乎所有软件能保持正常运行状态，就需要有一定的维护工作。")]),l._v(" "),v("li",[l._v("软件开发工作首先是一个工作，软件工程师首先是一个工程师。")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);