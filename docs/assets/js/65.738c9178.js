(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{493:function(t,v,_){"use strict";_.r(v);var e=_(2),r=Object(e.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[t._v("二叉搜索树上的基本操作所花费的时间与这棵树的高度成正比。对于有 n 个阶段的一棵完全二叉树来说，这些操作的最坏运行时间为 O(lgn)。然而，如果这棵树是一条 n 个结点组成的线性链，那么同样的操作就要花费 O(n) 的最坏运行时间。实际上，我们并不能总是保证随机地构造二叉搜索树，然而可以设计二叉搜索树的变体，来保证基本操作具有好的最坏情况性能，如红黑树。")]),t._v(" "),v("h3",{attrs:{id:"二叉搜索树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[t._v("#")]),t._v(" 二叉搜索树")]),t._v(" "),v("p",[t._v("性质：设 x 是二叉搜索树中的一个结点。如果 y 是 x 左子树中的一个阶段，那么 y.key<=x.key 如果 y 是 x 有子树中的一个结点，那么 y.key>=x.key。")]),t._v(" "),v("p",[t._v("二叉搜索树性质运行我们通过一个简单的递归算法来按序输出二叉树中的所有关键字，这种算法称为中序遍历算法（这样命名的原因是输出的子树根的关键字位于其左子树的关键字值和右子树的关键字值之间），类似地有先序遍历、后序遍历。")]),t._v(" "),v("h3",{attrs:{id:"红黑树"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#红黑树"}},[t._v("#")]),t._v(" 红黑树")]),t._v(" "),v("p",[t._v("红黑树是一棵二叉搜索树，它在每个节点上增加了一个存储位来表示结点的颜色，可以是红色或黑色。通过对任何一条从根到叶子的简单路径上各个节点的颜色进行约束，红黑树确保没有一条路径会比其他路径长出 2 倍，因而是近似于平衡的。")]),t._v(" "),v("p",[t._v("树中的每个结点包含5个属性：color、key、left、right 和 p。一棵红黑树是满足下面红黑性质的二叉搜索树：")]),t._v(" "),v("ol",[v("li",[t._v("每个结点或是红色的，或是黑色的。")]),t._v(" "),v("li",[t._v("根结点是黑色的。")]),t._v(" "),v("li",[t._v("每个叶节点是黑色的。")]),t._v(" "),v("li",[t._v("如果一个结点是红色的，则它的两个子结点都是黑色的。")]),t._v(" "),v("li",[t._v("对每个结点，从该结点到其所有后代叶节点的简单路径上，均包含相同数量的黑色结点。")])]),t._v(" "),v("p",[t._v("指针结构的修改是通过旋转来完成的，这是一种能保持二叉搜索树性质的搜索树局部操作。")])])}),[],!1,null,null,null);v.default=r.exports}}]);