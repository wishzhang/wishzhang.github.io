(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{523:function(_,v,t){"use strict";t.r(v);var a=t(2),s=Object(a.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("img",{attrs:{width:"100%",height:"500",src:"/assets/VCG41N531316319.jpg"}}),_._v(" "),v("h2",{attrs:{id:"_1-可靠性的定义及定量描述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-可靠性的定义及定量描述"}},[_._v("#")]),_._v(" 1 可靠性的定义及定量描述")]),_._v(" "),v("p",[_._v("可靠性在生活中常常能听到，比如这个人不靠谱，也就是期待他干好的事，却掉链子，跑去玩游戏了或上班迟到啥的，这个大概意思就是不可靠，但还是可用的。和可用性的区别就是，能用但是会失效，所以就有了可靠性的概念。这里是一个可靠性的定义："),v("code",[_._v("在规定的条件下，在规定的时间内，对软件操作而不出现系统失效的概率。")])]),_._v(" "),v("p",[_._v("主要有一些抽象出来的概念可参考：")]),_._v(" "),v("ul",[v("li",[_._v("规定时间")]),_._v(" "),v("li",[_._v("失效概率")]),_._v(" "),v("li",[_._v("可靠度")]),_._v(" "),v("li",[_._v("失效强度")]),_._v(" "),v("li",[_._v("失效率")]),_._v(" "),v("li",[_._v("平均无失效时间")])]),_._v(" "),v("h2",{attrs:{id:"_2-可靠性目标"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-可靠性目标"}},[_._v("#")]),_._v(" 2 可靠性目标")]),_._v(" "),v("p",[_._v("可靠性目标是指客户对软件心理满意程度的期望。建立定量的可靠性指标需要对可靠性、交付时间和成本进行平衡。通常用可靠度、故障强度和平均失效时间、故障的严重性等级等等指标来描述。")]),_._v(" "),v("h2",{attrs:{id:"_3-软件可靠性建模"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-软件可靠性建模"}},[_._v("#")]),_._v(" 3 软件可靠性建模")]),_._v(" "),v("h3",{attrs:{id:"影响软件可靠性的因素"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#影响软件可靠性的因素"}},[_._v("#")]),_._v(" "),v("strong",[_._v("影响软件可靠性的因素")])]),_._v(" "),v("p",[_._v("从技术的角度来看，影响软件可靠性的主要因素如下。")]),_._v(" "),v("p",[_._v("（1）运行环境")]),_._v(" "),v("p",[_._v("（2）软件规模")]),_._v(" "),v("p",[_._v("（3）软件内部结构")]),_._v(" "),v("p",[_._v("（4）软件的开发方法和开发环境")]),_._v(" "),v("p",[_._v("（5）软件的可靠性投入")]),_._v(" "),v("p",[_._v("总之，有许许多多的因素影响这软件的可靠性，有些至今也无法确定他们与软件可靠性之间的定量关系，甚至定性关系也不甚清楚。")]),_._v(" "),v("h3",{attrs:{id:"软件可靠性建模方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#软件可靠性建模方法"}},[_._v("#")]),_._v(" "),v("strong",[_._v("软件可靠性建模方法")])]),_._v(" "),v("p",[_._v("一个好的软件可靠性模型应该具有如下重要特性。")]),_._v(" "),v("p",[_._v("（1）基于可靠的假设")]),_._v(" "),v("p",[_._v("（2）简单")]),_._v(" "),v("p",[_._v("（3）计算一些有用的量")]),_._v(" "),v("p",[_._v("（4）给出未来失效行为的好的映射")]),_._v(" "),v("p",[_._v("（5）可广泛应用")]),_._v(" "),v("p",[_._v("需要说明的是，软件可靠性是一门正在发展中的分支学科，许多来源于硬件可靠性的理论在软件可靠性研究中并不适用，有关软件可靠性的模型并不成熟，并且应用范围也非常有限，软件可靠性的定量分析方法和数学模型要在实践中不断加以验证和修正，对于不同类型的软件，模型的假设、表示公式及应用方式也有很大的区别。")]),_._v(" "),v("h2",{attrs:{id:"_4-软件可靠性测试"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-软件可靠性测试"}},[_._v("#")]),_._v(" 4 软件可靠性测试")]),_._v(" "),v("p",[_._v("软件可靠性测试由可靠性目标的确定、运行环境的搭建、测试用例的设计、测试实施、测试结果的分析等主要活动组成。除此，还必须考虑对软件开发进度和成本的影响。")]),_._v(" "),v("h2",{attrs:{id:"_5-软件可靠性评价"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-软件可靠性评价"}},[_._v("#")]),_._v(" 5 软件可靠性评价")]),_._v(" "),v("p",[_._v("是指选用或建立合适的可靠性数学模型，运用统计技术和其他手段，对软件可靠性测试和系统运行期间收集的软件失效数据进行处理，并评估和预测软件可靠性的过程。这个过程包含如下三个方面。")]),_._v(" "),v("p",[_._v("（1）选择可靠性模型")]),_._v(" "),v("p",[_._v("（2）收集可靠性数据没开")]),_._v(" "),v("p",[_._v("（3）可靠性评估和预测")]),_._v(" "),v("h2",{attrs:{id:"_6-软件的可靠性设计与管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-软件的可靠性设计与管理"}},[_._v("#")]),_._v(" 6 软件的可靠性设计与管理")]),_._v(" "),v("h3",{attrs:{id:"软件可靠性设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#软件可靠性设计"}},[_._v("#")]),_._v(" "),v("strong",[_._v("软件可靠性设计")])]),_._v(" "),v("p",[_._v("可靠性设计概念被广为引用，但并没有多少人能提出非常实用并且广泛运用的可靠性设计技术。一般来说，被认可的且具有应用前景的软件可靠性设计技术主要有"),v("code",[_._v("容错技术")]),_._v("、"),v("code",[_._v("检错设计")]),_._v("和"),v("code",[_._v("降低复杂度设计")]),_._v("等技术。")]),_._v(" "),v("h4",{attrs:{id:"容错设计技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#容错设计技术"}},[_._v("#")]),_._v(" "),v("strong",[_._v("容错设计技术")])]),_._v(" "),v("ul",[v("li",[_._v("恢复块设计：更细粒度的恢复代码块。")]),_._v(" "),v("li",[_._v("N版本程序设计：相同需求不同的开发过程开发出来的版本，通过多数表决。")]),_._v(" "),v("li",[_._v("冗余设计：软件的冗余设计技术实现的原理是在一套完整的软件系统之外，设计一种不同路径、不同算法或不同实现方法的模块或系统作为备份，在出现故障时可以使用冗余的部分进行替换，从而维持软件系统的正常运行。\n"),v("ul",[v("li",[_._v("结构冗余\n"),v("ul",[v("li",[_._v("静态冗余：常用的有三模冗余和多模冗余。静态冗余通过表决和比较来屏蔽系统中出现的错误。例如，三模冗余是对3个功能相同，但由不同的人采用不同的方法开发出的模块的运行结果进行表决，以多数结果作为系统的最终结果。")]),_._v(" "),v("li",[_._v("动态冗余：主要方式是多重模块待机储备，但系统检测到某工作模块出现错误时，就用一个备用的模块来顶替它并重新运行。这里须有检测、切换和恢复过程，故称其为动态冗余。每当一个出错模块被备用模块顶替后，冗余系统相当于进行了一次重构。各备用模块在待机时，可与主模块一样工作，也可不工作。前者叫做热备份系统，后者叫做冷备份系统。")]),_._v(" "),v("li",[_._v("混合冗余")])])]),_._v(" "),v("li",[_._v("信息冗余：是在实现正常功能所需要的信息外，再添加一些信息，以保证运行结果正确的方法。例如，纠错码就是信息冗余的例子。")]),_._v(" "),v("li",[_._v("时间冗余：以重复执行指令或程序来消除瞬时错误带来的影响。")])])]),_._v(" "),v("li",[_._v("集群技术\n"),v("ul",[v("li",[_._v("负载均衡集群：使各结点的负载流量可与在服务器集群中尽可能平均合理地分摊处理。")]),_._v(" "),v("li",[_._v("高可用性集群：为保证集群整体服务的高可用，考虑计算硬件和软件的容错性。如果高可用性集群中的某个结点发生了故障，那么将由另外的结点代替它。整个系统环境对于用户是透明的。")])])])]),_._v(" "),v("h4",{attrs:{id:"检错技术"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#检错技术"}},[_._v("#")]),_._v(" "),v("strong",[_._v("检错技术")])]),_._v(" "),v("p",[_._v("在软件系统中，对无需在线容错的地方、或不能采用冗余设计技术的部分，如果对可靠性要求较高，故障有可能导致严重的后果。一般采用检错技术，在软件出现故障后能及时发现并报警，提醒维护人员进行处理。检错技术实现的代价一般低于容错技术和冗余技术，但它有一个明显的缺点，就是不能自动解决故障，出现故障后如果不进行人工干预，将最终导致软件系统不能正常运行。")]),_._v(" "),v("p",[_._v("采用检错设计技术要着重考虑几个要素：")]),_._v(" "),v("ul",[v("li",[_._v("检错对象")]),_._v(" "),v("li",[_._v("检测延时")]),_._v(" "),v("li",[_._v("实现方式")]),_._v(" "),v("li",[_._v("处理方式：大多数检错采用“查出故障——停止软件系统运行——报警”的处理方式，但也有采用不停止或部分停止软件系统运行的情况，这一般由故障是否需要实时处理决定。")])]),_._v(" "),v("h4",{attrs:{id:"降低复杂度设计"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#降低复杂度设计"}},[_._v("#")]),_._v(" "),v("strong",[_._v("降低复杂度设计")])]),_._v(" "),v("p",[_._v("软件复杂性常分为模块复杂性和结构复杂性。模块复杂性主要包含模块内部数据流向和程序长度两个方面，结构复杂性用不同模块之间的关联程度来表示。")]),_._v(" "),v("p",[_._v("降低复杂度设计的思想就是在保证实现软件功能的基础上，简化软件结构，缩短程序代码长度，优化软件数据流向，降低软件复杂度，从而提高软件可靠性。")]),_._v(" "),v("h3",{attrs:{id:"软件可靠性管理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#软件可靠性管理"}},[_._v("#")]),_._v(" "),v("strong",[_._v("软件可靠性管理")])]),_._v(" "),v("p",[_._v("可靠性管理目前还停留在定性描述的水平上，很难用量化的指标来进行可靠性管理。可靠性管理规范的制定水平和实施效果也有待提高。怎样利用有限的可靠性投入，达到预期的可靠性目标是软件项目管理者常常要面对的难题。因此，可靠性管理研究是一个长期的课题。")])])}),[],!1,null,null,null);v.default=s.exports}}]);