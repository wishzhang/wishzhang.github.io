(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{469:function(s,a,t){"use strict";t.r(a);var n=t(2),r=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"_1-作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-作用域"}},[s._v("#")]),s._v(" 1 作用域")]),s._v(" "),a("blockquote",[a("p",[s._v("世界的来源：世界是人类观察的世界，我处在的世界是我所观察领悟到的世界。\n世界是什么：人类所领悟到的知识归类为学科，再运用知识去解决问题，相当于于一张无限的概率节点图。\n人类将事物抽象成大小不同粒度的模块，那么作用域是模块的本身属性，即模块的有效范围，是必要的。")])]),s._v(" "),a("h3",{attrs:{id:"_1-1-编译原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-编译原理"}},[s._v("#")]),s._v(" 1.1 编译原理")]),s._v(" "),a("p",[s._v("源代码在执行之前会经历三个步骤，统称为“编译”。")]),s._v(" "),a("ol",[a("li",[s._v("分词/词法分析")]),s._v(" "),a("li",[s._v("解析/语法分析")]),s._v(" "),a("li",[s._v("代码生成")])]),s._v(" "),a("h3",{attrs:{id:"_1-2-词法作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-词法作用域"}},[s._v("#")]),s._v(" 1.2 词法作用域")]),s._v(" "),a("p",[s._v("JavaScript采用词法作用域(lexical scoping), 也就是静态作用域。\n静态作用域在编译时就确定了，动态作用域是在运行时确定的。")]),s._v(" "),a("h3",{attrs:{id:"_1-3-函数作用域和块作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-函数作用域和块作用域"}},[s._v("#")]),s._v(" 1.3 函数作用域和块作用域")]),s._v(" "),a("p",[s._v("函数作用域的含义指，属于这个函数的全部变量都可以在整个函数的范围内使用。\n块作用域指的是变量和函数不仅可以属于所处的作用域，也可以属于某个代码块（通常指 { .. } 内部）。")]),s._v(" "),a("h3",{attrs:{id:"_1-4-提升"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-提升"}},[s._v("#")]),s._v(" 1.4 提升")]),s._v(" "),a("p",[s._v("我们习惯将 var a = 2; 看作一个声明，而实际上 JavaScript 引擎并不这么认为。它将 var a 和 a = 2 当作两个单独的声明，第一个是编译阶段的任务，而第二个则是执行阶段的任务。 这意味着无论作用域中的声明出现在什么地方，都将在代码本身被执行前首先进行处理。 可以将这个过程形象地想象成所有的声明（变量和函数）都会被“移动”到各自作用域的 最顶端，这个过程被称为提升。")]),s._v(" "),a("p",[s._v("变量提升规则：")]),s._v(" "),a("ul",[a("li",[s._v("var 和函数声明可以变量提升，函数声明优先于var")]),s._v(" "),a("li",[s._v("var 变量提升值赋值undefined, 函数声明优先于var")]),s._v(" "),a("li",[s._v("函数声明重复声明会覆盖\nconst和let声明：")]),s._v(" "),a("li",[s._v("不存在变量提升")]),s._v(" "),a("li",[s._v("不能重复声明")]),s._v(" "),a("li",[s._v("作用域死区，变量使用前必须先声明")]),s._v(" "),a("li",[s._v("const声明，如果值类型不可修改，引用类型地址不可修改")])]),s._v(" "),a("h3",{attrs:{id:"_1-5-作用域嵌套"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-作用域嵌套"}},[s._v("#")]),s._v(" 1.5 作用域嵌套")]),s._v(" "),a("p",[s._v("当一个块或函数嵌套在另一个块或函数中时，就发生了作用域的嵌套。因此，在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量， 或抵达最外层的作用域（也就是全局作用域）为止。")]),s._v(" "),a("h3",{attrs:{id:"_1-6-异常"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-异常"}},[s._v("#")]),s._v(" 1.6 异常")]),s._v(" "),a("p",[s._v("如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError异常。")]),s._v(" "),a("p",[s._v("如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作， 比如试图对一个非函数类型的值进行函数调用，或着引用null 或 undefined 类型的值中的属性，那么引擎会抛出另外一种类型的异常，叫作TypeError。")]),s._v(" "),a("p",[s._v("ReferenceError同作用域判别失败相关，而TypeError则代表作用域判别成功了，但是对结果的操作是非法或不合理的。")]),s._v(" "),a("h2",{attrs:{id:"_2-闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-闭包"}},[s._v("#")]),s._v(" 2 闭包")]),s._v(" "),a("blockquote",[a("p",[s._v("函数在当前词法作用域之外的地方"),a("strong",[s._v("执行时")]),s._v("，可以记住并访问所在的词法作用域，这时就产生了闭包。闭包是基于垃圾回收和作用域链的机制产生的一种现象。")])]),s._v(" "),a("h3",{attrs:{id:"_2-1-执行环境和作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-执行环境和作用域链"}},[s._v("#")]),s._v(" 2.1 执行环境和作用域链")]),s._v(" "),a("blockquote",[a("p",[s._v("当某个函数被调用时，会创建一个执行环境以及相应的作用域链。执行环境分为全局执行环境和局部执行环境。\n作用域链本质上是一个指向作用域对象的链表。无论什么时候在函数中访问一个变量时，就会从作用域链中搜索具有相应名字的变量。")])]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("debugger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'here is global'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("debugger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("second")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'here is b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("debugger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("third")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("debugger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'here is c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("debugger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("second")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("debugger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("script"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[s._v("浏览器的调试工具会把函数调用栈、函数可访问的变量都列出来\n"),a("img",{attrs:{src:"/assets/zuoyongyu_bibao.png",alt:"8188e4719fe0570282abc23c87285675.png"}})]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"_3-应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-应用"}},[s._v("#")]),s._v(" 3 应用")]),s._v(" "),a("p",[s._v("作用域和闭包的理论了解就这么多啦，毕竟没有看源码不知道太细节的逻辑，但大致的理论能够保证是正确的。\n应用作用域和闭包的思想就是，根据词法作用域访问变量，然后了解变量的引用情况去做详细设计编码，遇到难以解决的问题就打开控制台查看具体的堆栈，闭包等信息。")]),s._v(" "),a("p",[s._v("下面列举一些最佳实践：")]),s._v(" "),a("ul",[a("li",[s._v("函数柯里化")]),s._v(" "),a("li",[s._v("缓存的方法")]),s._v(" "),a("li",[s._v("工厂模式")]),s._v(" "),a("li",[s._v("面向对象封装")]),s._v(" "),a("li",[s._v("延迟使用")])])])}),[],!1,null,null,null);a.default=r.exports}}]);