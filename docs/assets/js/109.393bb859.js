(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{548:function(t,a,s){"use strict";s.r(a);var n=s(2),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"为什么会出现数据驱动的这个想法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会出现数据驱动的这个想法"}},[t._v("#")]),t._v(" 为什么会出现数据驱动的这个想法？")]),t._v(" "),a("p",[t._v("以工业界的目标（赚钱）来说，为了更快更好地输出产品，整个过程需要改进、评估等实践来提升。对于前端开发以往的经典模式有 "),a("strong",[t._v("MVC")]),t._v(" 模式：M 是数据模型（领域模型），V 是视图模型（即我们可以看到的页面视图），C 是程序员掌控的将对M和对V的操作结合在一起，来实现数据模型和视图模型的通信。而 "),a("strong",[t._v("MVVM")]),t._v(" 模式中的 VM 指的是视图模型和数据模型的绑定模型，视图模型和数据模型的通信由绑定模型来完成，程序员只需定义好这个绑定模型的数据定义，从而从程序员的角度看，数据变了，相关联的数据和视图都会随之改变，所以叫做数据驱动。")]),t._v(" "),a("p",[t._v("MVVM 这个模式由微软架构师于2005 年在他的博客上发布了，挺早的想法了，像 Angular 是在 2010 年就开源了，React 在 2013 年开源，Vue 是 2014 年出的。Angular 是谷歌出品把后端的那 MVC、依赖注入带到前端、还实现了 MVVM 模型。React 据说是参考 PHP 的 XHP 框架的思想来搞的同样实现了 MVVM 模型。而 Vue 框架是尤大大最初从 AngularJS 中提取自己喜欢的部分。可以看出这框架的诞生一般由最初的思想或者对现有产品的思考为基础，通常借鉴了其他一些框架的思想和优点，但无论怎样都必须是有架构的目标和方向、产品化、市场化来引导。")]),t._v(" "),a("h2",{attrs:{id:"数据驱动对于前端的架构或生态的影响"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据驱动对于前端的架构或生态的影响"}},[t._v("#")]),t._v(" 数据驱动对于前端的架构或生态的影响？")]),t._v(" "),a("p",[t._v("经过这些年实践的检验，当前主流的前端框架都是基于数据驱动原理，对于开发效率，可维护性有比较大的提升。虽然在性能和可测试性有所降低，但大都在可接受的范围内，并不影响商业生产。目前前端的生态基于三大框架，再有国内的微信小程序开发而衍生出的移动端的开发，都运用了数据驱动的原理。这个没有什么不好的影响，目前前端在继续发展中，前端的技术标准也在不断发展中。")]),t._v(" "),a("h2",{attrs:{id:"vue2-基于数据驱动的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue2-基于数据驱动的实现原理"}},[t._v("#")]),t._v(" Vue2 基于数据驱动的实现原理？")]),t._v(" "),a("p",[t._v("数据驱动包括视图、数据模型的改变而驱动的变化，这里笔者只说明由数据更新到视图的过程。更新视图调用以下函数：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("updateComponent")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tvm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_update")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("_render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hydrating"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("借助虚拟 DOM，"),a("code",[t._v("vm._render()")]),t._v(" 返回的结果是 VNode。而 "),a("code",[t._v("_update")]),t._v(" 方法 实际调用的是 "),a("code",[t._v("__ patch __")]),t._v(" 方法，由于这个方法是平台相关的，不同平台的视图操作或一些指令是不同的，所以通过一个公共的 "),a("code",[t._v("createPatchFunction({ nodeOps, modules })")]),t._v("  来创建对应平台的的 "),a("code",[t._v("patch")]),t._v(" 方法，再进行打包运行。")]),t._v(" "),a("p",[t._v("那么这个核心的 "),a("strong",[a("code",[t._v("patch")])]),t._v(" 方法主要是将 VNode 渲染成真实的 DOM，其中最重要的是 "),a("strong",[t._v("diff")]),t._v(" 过程。diff 的主要思想是将虚拟树作一个前序遍历，将两棵新旧 VNode 树的同层节点进行比较，每一轮依次从四个组合进行比较（先头再尾，再交叉），当节点相同则进入子树递归。这样就省去了一些 VNode 的渲染，从而提升算法效率。")])])}),[],!1,null,null,null);a.default=e.exports}}]);